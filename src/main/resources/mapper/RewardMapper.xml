<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xinyue.manage.dao.RewardDAO">
	<resultMap type="com.xinyue.manage.model.OutLine" id="outline">
		<result column="id" property="id" />
		<result column="user_id" property="userId" />
		<result column="user_type" property="userType" />
		<result column="recharge_total" property="rechargeTotal" />
		<result column="consumption_total" property="consumptionTotal" />
		<result column="reward_total" property="rewardTotal" />
		<result column="withdraw_total" property="withdrawTotal" />
		<result column="remaining_sum" property="remainingSum" />
		<result column="created_id" property="createdId" />
		<result column="modified_id" property="modifiedId" />
		<result column="created_time" property="createdTime" />
		<result column="modified_time" property="modifiedTime" />
	</resultMap>
	
	<resultMap type="com.xinyue.manage.model.Reward" id="reward">
		<result column="id" property="id" />
		<result column="userId" property="userId" />
		<result column="userType" property="userType" />
		<result column="rewardType" property="rewardType" />
		<result column="sericalNumber" property="sericalNumber" />
		<result column="remark" property="remark" />
		<result column="source" property="source" />
		<result column="rewardAmount" property="rewardAmount" />
		<result column="rewardTime" property="rewardTime" />
		<result column="currentAmount" property="currentAmount" />
		<result column="deleted" property="deleted" />
	</resultMap>

	<resultMap type="com.xinyue.manage.model.WithdrawMoney" id="withdraw">
		<result column="id" property="id" />
		<result column="user_id" property="userId" />
		<result column="user_type" property="userType" />
		<result column="serical_number" property="sericalNumber" />
		<result column="current_amount" property="currentAmount" />
		<result column="withdraw_amount" property="withdrawAmount" />
		<result column="withdraw_time" property="withdrawTime" />
		<result column="remark" property="remark" />
		<result column="deleted" property="deleted" />
		<association column="withdraw_type"  property="withdrawType" javaType="String" select="getWithdrawType"></association>
		<association column="status"  property="status" javaType="String" select="getWithdrawStatus"></association>
	</resultMap>
	
	<select id="getWithdrawType" resultType="String">
		select select_value from m_select_info where select_key = #{type} and type_code = 'withdraw_type'
	</select>
	
	<select id="getWithdrawStatus" resultType="String">
		select select_value from m_select_info where select_key = #{status} and type_code = 'withdraw_status'
	</select>
	
	<insert id="addOutline" parameterType="com.xinyue.manage.model.OutLine">
		insert into m_reward_outline
			(id,user_id,user_type,recharge_total,consumption_total,reward_total,withdraw_total,
				remaining_sum,created_id,created_time,modified_id,modified_time)
		values
			(#{id},#{userId},#{userType},#{rechargeTotal},#{consumptionTotal},#{rewardTotal},#{withdrawTotal},
				#{remainingSum},#{createdId},now(),#{modifiedId},now())
	</insert>
	
	<insert id="addWithdraw" parameterType="com.xinyue.manage.model.WithdrawMoney">
		insert into m_withdraw_money_info
			(id,user_id,withdraw_type,withdraw_amount,withdraw_time,status,serical_number,
				remark,deleted,user_type,current_amount)
		values
			(#{id},#{userId},#{withdrawType},#{withdrawAmount},now(),#{status},#{sericalNumber},
				#{remark},#{deleted},#{userType},#{currentAmount})
	</insert>
	<insert id="addReward" parameterType="com.xinyue.manage.model.Reward">
		insert into m_reward_info
			(id,user_id,reward_type,reward_amount,reward_time,status,serical_number,
				remark,deleted,user_type,current_amount)
		values
			(#{id},#{userId},#{rewardType},#{rewardAmount},now(),#{status},#{sericalNumber}
				#{remark},#{deleted},#{userType},#{currentAmount})
	</insert>
	
	<select id="getRewardList" resultMap="reward">
		select r.id,
			   r.serical_number,
			   r.remark,
			   s.select_value as reward_type,
			   r.reward_time,
			   r.reward_amount,
			   r.current_amount
		from m_reward_info r
		left join m_select_info s on s.select_key = r.reward_type and type_code = #{typeCode}
		where r.user_id = #{userId} 
			<if test="searchReward.startTime != null">
				and reward_time > #{searchReward.startTime}
			</if>
			<if test="searchReward.endTime != null">
					<![CDATA[and reward_time < #{searchReward.endTime} ]]> 
			</if>
		limit #{pageNo},#{pageSize}
	</select>
	
	<select id="countRewardList" resultType="int">
		select count(*)
		from m_reward_info r
		where r.user_id = #{userId} 
			<if test="searchReward.startTime != null">
				and reward_time > #{searchReward.startTime}
			</if>
			<if test="searchReward.endTime != null">
					<![CDATA[and reward_time < #{searchReward.endTime} ]]> 
			</if>
	</select>
	
	<select id="getWithdrawList" resultMap="withdraw">
		select * from m_withdraw_money_info
		where user_id = #{userId}
		<if test="searchReward.startTime != null">
				and withdraw_time > #{searchReward.startTime}
			</if>
			<if test="searchReward.endTime != null">
					<![CDATA[and withdraw_time < #{searchReward.endTime} ]]> 
			</if>
		limit #{pageNo},#{pageSize}
	</select>
	
	<select id="countWithdrawList" resultType="int">
		select count(*) from m_withdraw_money_info
		where user_id = #{userId}
		<if test="searchReward.startTime != null">
				and withdraw_time > #{searchReward.startTime}
			</if>
			<if test="searchReward.endTime != null">
					<![CDATA[and withdraw_time < #{searchReward.endTime} ]]> 
			</if>
	</select>
	
	<select id="getRewardOutLine" parameterType="string" resultMap="outline">
		select * from m_reward_outline
			where user_id = #{userId}
	</select>
	
	
	
	
	
</mapper>